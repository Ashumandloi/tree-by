                                 Tree Data Structure
We read the linear data structures like an array, linked list, stack and queue in which all the elements are arranged in a sequential manner. The different data structures are used for different kinds of data.
Some factors are considered for choosing the data structure:
•	What type of data needs to be stored?: It might be a possibility that a certain data structure can be the best fit for some kind of data.
•	Cost of operations: If we want to minimize the cost for the operations for the most frequently performed operations. For example, we have a simple list on which we have to perform the search operation; then, we can create an array in which elements are stored in sorted order to perform the binary search. 
•	Memory usage: Sometimes, we want a data structure that utilizes less memory.
A tree is also one of the data structures that represent hierarchical data. Suppose we want to show the employees and their positions in the hierarchical form then it can be represented as shown below:
 
The above tree shows the organization hierarchy of some company. In the above structure, john is the CEO of the company, and John has two direct reports named as Steve and Rohan. Steve has three direct reports named Lee, Bob, Ella where Steve is a manager. Bob has two direct reports named Sal and Emma. Emma has two direct reports named Tom and Raj. Tom has one direct report named Bill. This particular logical structure is known as a Tree. Its structure is similar to the real tree, so it is named a Tree. 
Let's understand some key points of the Tree data structure.
•	A tree data structure is defined as a collection of objects or entities known as nodes that are linked together to represent or simulate hierarchy.
•	A tree data structure is a non-linear data structure because it does not store in a sequential manner. It is a hierarchical structure as elements in a Tree are arranged in multiple levels.
•	Each node contains some data and the link or reference of other nodes that can be called children.
Some basic terms used in Tree data structure.
Let's consider the tree structure, which is shown below:
 
In the above structure, each node is labeled with some number. Each arrow shown in the above figure is known as a link between the two nodes.
•	Root: The root node is the topmost node in the tree hierarchy. In other words, the root node is the one that doesn't have any parent. In the above structure, node numbered 1 is the root node of the tree. If a node is directly linked to some other node, it would be called a parent-child relationship.
•	Child node: If the node is a descendant of any node, then the node is known as a child node.
•	Parent: If the node contains any sub-node, then that node is said to be the parent of that sub-node.
•	Sibling: The nodes that have the same parent are known as siblings.
•	Leaf Node:- The node of the tree, which doesn't have any child node, is called a leaf node. A leaf node is the bottom-most node of the tree. There can be any number of leaf nodes present in a general tree. Leaf nodes can also be called external nodes.
•	Internal nodes: A node has atleast one child node known as an internal
•	Ancestor node:- An ancestor of a node is any predecessor node on a path from the root to that node. The root node doesn't have any ancestors. In the tree shown in the above image, nodes 1, 2, and 5 are the ancestors of node 10.
•	Descendant: The immediate successor of the given node is known as a descendant of a node. In the above figure, 10 is the descendant of node 5.
Properties of Tree data structure
•	Recursive data structure: The tree is also known as a recursive data structure. A tree can be defined as recursively because the distinguished node in a tree data structure is known as a root node. The root node of the tree contains a link to all the roots of its subtrees. The left subtree is shown in the yellow color in the below figure, and the right subtree is shown in the red color. 

 
•	Number of edges: If there are n nodes, then there would n-1 edges. Each arrow in the structure represents the link or path. Each node, except the root node, will have atleast one incoming link known as an edge. There would be one link for the parent-child relationship.
•	Height of node x: The height of node x can be defined as the longest path from the node x to the leaf node.
Based on the properties of the Tree data structure, trees are classified into various categories.
Implementation of Tree
The tree data structure can be created by creating the nodes dynamically with the help of the pointers. The tree in the memory can be represented as shown below:
 
The above figure shows the representation of the tree data structure in the memory. In the above structure, the node contains three fields. The second field stores the data; the first field stores the address of the left child, and the third field stores the address of the right child.
In programming, the structure of a node can be defined as:
•	struct node  
•	{  
•	  int data;  
•	struct node *left;  
•	struct node *right;   
•	}  
The above structure can only be defined for the binary trees because the binary tree can have utmost two children, and generic trees can have more than two children.
Applications of trees
The following are the applications of trees:
•	Organize data: It is used to organize data for efficient insertion, deletion and searching. For example, a binary tree has a logN time for searching an element.
•	Trie: It is a special kind of tree that is used to store the dictionary. It is a fast and efficient way for dynamic spell checking.
•	Heap: It is also a tree data structure implemented using arrays. It is used to implement priority queues.
•	B-Tree and B+Tree: B-Tree and B+Tree are the tree data structures used to implement indexing in databases.
•	Routing table: The tree data structure is also used to store the data in routing tables in the routers.
Types of Tree data structure
The following are the types of a tree data structure:
•	General tree: The general tree is one of the types of tree data structure. In the general tree, a node can have either 0 or maximum n number of nodes. There is no restriction imposed on the degree of the node (the number of nodes that a node can contain). The topmost node in a general tree is known as a root node. The children of the parent node are known as subtrees.

 

Every non-empty tree has a downward edge, and these edges are connected to the nodes known as child nodes. The root node is labeled with level 0. The nodes that have the same parent are known as siblings.
•	Binary tree: Here, binary name itself suggests two numbers, i.e., 0 and 1. In a binary tree, each node in a tree can have utmost two child nodes. Here, utmost means whether the node has 0 nodes, 1 node or 2 nodes.
 
To know more about the binary tree, click on the link given below:

Binary Search tree: Binary search tree is a non-linear data structure in which one node is connected to n number of nodes. It is a node-based data structure. A node can be represented in a binary search tree with three fields, i.e., data part, left-child, and right-child. 
A node can be created with the help of a user-defined data type known as struct, as shown below:
•	struct node  
•	{  
•	    int data;  
•	    struct node *left;  
•	struct node *right;   
•	}  
The above is the node structure with three fields: data field, the second field is the left pointer of the node type, and the third field is the right pointer of the node type.


